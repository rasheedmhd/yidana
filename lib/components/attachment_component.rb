# frozen_string_literal: true

module AttachmentPreserver
  def attachment(_wrapper_options = nil)
    return unless value&.attached?

    multiple = value.respond_to?(:each)

    template.content_tag :div do
      # This is a hack to support the removal of has_one_attached attachments
      # Usually, no hidden field is inserted for these
      # By inserting one, with a value of nil, when the form is submitted,
      # the autogenerated setter will remove the attachment for us.
      template.concat @builder.hidden_field(attribute_name, value: nil) unless multiple

      template.concat begin
        template.display_attachment_value(value) do |attachment|
          [
            # These hidden fields allow us to preserve the already uploaded files.
            # For has_one_attached, it overrides the hidden field previously added
            #   (if the same input exists, the more recent one wins)
            #
            # For has_many_attached, the generated setter replaces all the existing files when the form is submitted
            # By adding hidden fields for the existing files, it allows us to append the new files
            @builder.hidden_field(attribute_name, multiple:, value: attachment.signed_id),

            # By removing this component, the hidden field is gone, which allows us to remove the files from active storage
            template.content_tag(:p, class: 'text-danger m-0', role: :button,
                                     data: { action: 'click->attachment#remove' }) do
              template.content_tag :span, ' Delete', class: 'bi bi-trash'
            end
          ]
        end
      end
    end
  end

  private

  def value
    @value ||= object.send(attribute_name) if object && object.respond_to?(attribute_name)
  end
end

# Register the component in Simple Form.
SimpleForm.include_component(AttachmentPreserver)
